/*
 * This file is generated by jOOQ.
 */
package SS.DesktopApp.Domain.tables;


import SS.DesktopApp.Domain.Admin;
import SS.DesktopApp.Domain.Keys;
import SS.DesktopApp.Domain.Entities.ClienteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cliente extends TableImpl<ClienteRecord> {

    private static final long serialVersionUID = -1139858006;

    /**
     * The reference instance of <code>ADMIN.CLIENTE</code>
     */
    public static final Cliente CLIENTE = new Cliente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClienteRecord> getRecordType() {
        return ClienteRecord.class;
    }

    /**
     * The column <code>ADMIN.CLIENTE.ID_CUS</code>.
     */
    public final TableField<ClienteRecord, Integer> ID_CUS = createField("ID_CUS", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.RFC</code>.
     */
    public final TableField<ClienteRecord, String> RFC = createField("RFC", org.jooq.impl.SQLDataType.VARCHAR(13), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.FIRSTNAME</code>.
     */
    public final TableField<ClienteRecord, String> FIRSTNAME = createField("FIRSTNAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.LASTNAME</code>.
     */
    public final TableField<ClienteRecord, String> LASTNAME = createField("LASTNAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.CALLE</code>.
     */
    public final TableField<ClienteRecord, String> CALLE = createField("CALLE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.NUMERO</code>.
     */
    public final TableField<ClienteRecord, String> NUMERO = createField("NUMERO", org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.COLONIA</code>.
     */
    public final TableField<ClienteRecord, String> COLONIA = createField("COLONIA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.CP</code>.
     */
    public final TableField<ClienteRecord, Integer> CP = createField("CP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ADMIN.CLIENTE.CIUDAD</code>.
     */
    public final TableField<ClienteRecord, String> CIUDAD = createField("CIUDAD", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.ESTADO</code>.
     */
    public final TableField<ClienteRecord, String> ESTADO = createField("ESTADO", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.EMAIL</code>.
     */
    public final TableField<ClienteRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.TEL_CELULAR</code>.
     */
    public final TableField<ClienteRecord, String> TEL_CELULAR = createField("TEL_CELULAR", org.jooq.impl.SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>ADMIN.CLIENTE.TEL_EMPRESA</code>.
     */
    public final TableField<ClienteRecord, String> TEL_EMPRESA = createField("TEL_EMPRESA", org.jooq.impl.SQLDataType.VARCHAR(12), this, "");

    /**
     * Create a <code>ADMIN.CLIENTE</code> table reference
     */
    public Cliente() {
        this(DSL.name("CLIENTE"), null);
    }

    /**
     * Create an aliased <code>ADMIN.CLIENTE</code> table reference
     */
    public Cliente(String alias) {
        this(DSL.name(alias), CLIENTE);
    }

    /**
     * Create an aliased <code>ADMIN.CLIENTE</code> table reference
     */
    public Cliente(Name alias) {
        this(alias, CLIENTE);
    }

    private Cliente(Name alias, Table<ClienteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cliente(Name alias, Table<ClienteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cliente(Table<O> child, ForeignKey<O, ClienteRecord> key) {
        super(child, key, CLIENTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClienteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClienteRecord> getPrimaryKey() {
        return Keys.SQL180711232154560;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClienteRecord>> getKeys() {
        return Arrays.<UniqueKey<ClienteRecord>>asList(Keys.SQL180711232154560);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cliente as(String alias) {
        return new Cliente(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cliente as(Name alias) {
        return new Cliente(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(String name) {
        return new Cliente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Name name) {
        return new Cliente(name, null);
    }
}
